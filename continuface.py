import json
import google.generativeai as genai
import os

api_key = 'AIzaSyBCcg0skdWwwG-hBucIvDCLHY9FFtzw9-0'
genai.configure(api_key=api_key)
model = genai.GenerativeModel('gemini-pro')

p=input("輸入關注對象:")
q=model.generate_content("請幫我進行文字的校正，校正的部分主要是人名:[莊佩蓁、黃樺裕、羅詠琳]三個名字，等等輸入的問題可能人名中會有錯字，例如可能輸入值為:「我的前方有裝配針嗎」，就請幫我輸出:「我的前方有莊佩蓁嗎」，另外兩個人名同理，除了人名需要校正以外，輸入值的其他字請保持原樣。接下來為輸入值:"+p).text
print(q)
response = model.generate_content("請判斷使用者想關注下列三個人中的哪幾位並回答人物名稱1.黃樺裕2.羅詠琳3.莊佩蓁，回答的人物名稱必須何上述一模一樣。例如要求為:請幫我關注黃樺裕和莊佩蓁，則回答黃樺裕、莊佩蓁。請記住，上面的只是例題，接下來的關注對象以使用者的要求為準。使用者要求:"+q)
target=response.text
print("正在幫您關注:"+target+"\n")

history="無"
count=0

def facecon(input_data):
    global history
    global target
    global count
    item_counts = {
        "黃樺裕": 0,
        "羅詠琳": 0,
        "莊佩蓁": 0,
    }
    
    # 確保 input_data 是可迭代的
    for item in input_data:
        if isinstance(item, dict):
            if item["name"] == "Huang" and item["confidence"] > 0.5:
                item_counts["黃樺裕"] += 1
            elif item["name"] == "Irene" and item["confidence"] > 0.5:
                item_counts["羅詠琳"] += 1
            elif item["name"] == "Paney" and item["confidence"] > 0.5:
                item_counts["莊佩蓁"] += 1
    
    # 只保留數量大於 0 的項目
    fitem = {item: count for item, count in item_counts.items() if count > 0}
    
    # 構建結果字符串，僅包含物品名稱
    result = "、".join(f"{item}" for item in fitem.keys())
    ans = "使用者的視野裡有" + result
    print(ans)
    # first=model.generate_content("請幫我篩選出使用者關注目標的資訊，請幫我過濾掉關注對象以外的資訊。以下兩個情況為參考回答示範。示範1:示範題目:使用者的視野裡有Huang、Paney、Irene。使用者的關注目標:Irene。在這個情況中請幫我過濾掉Irene以外的人物，因此需回答:關注對象Irene出現在您的視野中。示範題目2:使用者的視野裡有Paney、Irene。使用者的關注目標:Huang。在這個情況中請幫我過濾掉Huang以外的人物資訊，因此需回答:您的視野裡沒有關注對象Huang。請注意，以上只是範例，一切資訊包括使用者視野裡有甚麼跟關注對象皆以接下來的題目為準，尤其是關注目標，請必定要依照接下來後面題目的關注目標篩選題目資訊，非關注目標的資訊一律都必須過濾掉。只需要給我最終的回答就好，不需要有多餘的過程。接下來為正式題目:"+ans+"。使用者的關注目標:"+target)
    first=model.generate_content("請幫我篩選出使用者關注目標的資訊，請幫我過濾掉關注對象以外的資訊。非關注目標的資訊一律都必須過濾掉，只需要專注回答使用者關注對象的資訊就好。舉個例子:假設題目說:使用者的視野裡有黃樺裕、莊佩蓁。使用者關注的目標為莊佩蓁。解題思路:例題中使用者的關注目標為莊佩蓁，因此只須回答關注對象莊佩蓁的資訊就好，此例題中關注對象以外的黃樺裕就要過濾掉，因此最終只須回答「使用者的視野中有關注對象莊佩蓁」。再舉個例子:假設這次題目說:使用者的視野裡有黃樺裕。使用者關注的目標為羅詠琳、黃樺裕。解題思路:這次例題中使用者的關注目標為羅詠琳跟黃樺裕，因此須回答關注對象羅詠琳和黃樺裕的資訊，此例題中關注對象黃樺裕有出現在使用者的視野中，而羅詠琳沒有，則須回報給使用者「使用者的視野中有關注對象黃樺裕，沒有關注對象羅詠琳」。請記住，剛剛的只是例題，你只能參考它的解題思路，每個題目視野中出線的人跟關注對象都有可能改變，所以接下來一切的回答都以後面的正是題目為準。這是你剛剛的回答錯誤案例，在這個案例中:使用者的視野裡有莊佩蓁。使用者的關注目標:羅詠琳、黃樺裕、莊佩蓁。你在這個案例中的錯誤回答:使用者的視野中有關注對象 黃樺裕 和 莊佩蓁，沒有關注對象 羅詠琳。訂正:在這個案例中，使用者的視野中只有莊佩蓁，並沒有黃樺裕，回答請完全依據使用者的視野中有的人，因此在這個案例中，答案應該為:使用者的視野中有關注對象莊佩蓁，沒有關注對象黃樺裕跟羅詠琳。請記得在之後得回答中避免該錯誤再次發生。只需要給我最終的回答就好，不需要有多餘的過程。接下來為正式題目:"+ans+"。使用者的關注目標:"+target)
    print("過去:"+history+"\n現在:"+first.text)
    sec=model.generate_content("請幫我比對過去跟現在兩筆資料回應給使用者，如果過去資料為無，即回答現在資料，如果過去資料存在，則需告訴使用者和過去資料相比，使用者的視野出現了甚麼變化，如果資料中沒有提到某人，即代表某人目前不在使用者的視野範圍中，請回報畫面中沒有該人。接下來為例題:過去資料:使用者的視野中有關注對象 羅詠琳 現在資料:使用者的視野中有關注對象 莊佩蓁 解題思路:在例題的情況中，使用者目前的視野中少了關注對象 羅詠琳，多了關注對象 莊佩蓁，你需要回答給使用者視野中出現了甚麼變化，因此在例題中應該回答:關注對象羅詠琳離開了您的視野，關注對象莊佩蓁出現在了您的視野中。請記住，剛剛的只是參考用的例題，你只能參考它的解題思路，正式回答請完全根據後面的現在資料即過去資料。我最後只需要回報給使用者的回答，如果現在資料跟現在資料之間完全沒有變化，回答一定要包含關鍵字:沒有變化，反之，如果有任何一物品出現變化，則不能包含關鍵字:沒有變化。這是你關於「沒有變化」的錯誤回答案例，案例中過去資料:使用者的視野中有關注對象 黃樺裕，沒有 羅詠琳 和 莊佩蓁。現在資料:使用者的視野中有關注對象莊佩蓁，沒有關注對象羅詠琳和黃樺裕。你在這個案例中的錯誤回答:您現在的視野中出現了一位新的關注對象：莊佩蓁，而過去視野中的關注對象 黃樺裕 離開了您的視野，沒有變化。訂正:使用者的視野中出現了莊佩蓁，少了黃樺裕，有發生改變，因此你不能在回答中提到「沒有變化」，請記住這屬於嚴重的錯誤，因此，在這個案例中你應該回答:關注對象莊佩蓁出現在了您的視野，關注對象黃樺裕離開了的視野 。接下來為「」內的為例題:「過去資料:使用者的視野中有關注對象 黃樺裕 。現在資料:使用者的視野中有關注對象黃樺裕。，解題思路:由於現在資料跟過去資料之間沒有改變，因此在這個例題中最終應回答:您現在的視野中有關注對象黃樺裕，沒有變化」。這是你剛剛的回答錯誤案例，在這個案例中，過去資料:使用者的視野中有關注對象黃樺裕。現在資料:使用者的視野中沒有關注對象黃樺裕。你在錯誤案例中的錯誤回答為:您現在的視野中不再關注對象黃樺裕。修正:請記住案例中提到的沒有關注對象指的是，沒有了，關注對象黃樺裕；並不是不再關注黃樺裕的意思，因此你在這個案例中，應該回答:關注對象黃樺裕離開了您的視野。這是第二個錯誤案例，在這個案例中，過去資料:使用者的視野中有關注對象 黃樺裕 和 莊佩蓁，沒有關注對象 羅詠琳。現在資料:使用者的視野中有關注對象 莊佩蓁。在這個錯誤案例中，你當時的回答為:關注對象 羅詠琳 和 黃樺裕 都離開了您的視野。修正:請記得，你只需要比較現在資料跟過去資料的變化，在這個案例中，過去資料提到使用者的視野裡只有莊佩蓁跟黃樺裕，沒有羅詠琳，而現在資料只剩下莊佩蓁，和過去資料相比使用者的視野只少了黃樺裕，在這個案例中，過去使用者的視野中有莊佩蓁跟黃樺裕，現在使用者的視野中有莊佩蓁，兩者相比較只少了黃樺裕，因此在這個案例中，你的回答應該為:關注對象黃樺裕離開了您的視野。請記得在之後得回答中避免該錯誤再次發生。回答時請記得以「您」來稱呼使用者，接下來，為正式的題目:過去資料:"+history+" 。現在資料:"+first.text)
    print("b:"+sec.text)
    final=sec.text
    keyword = ["沒有變化"]
    for keyword in keyword:
        if keyword in final:
            #這邊能改變重複次數
            if count<=3:
                final=" "
                count+=1
                break
            else:
                count=0
    print("a"+final)

    history=first.text


a = [
    {"name": "Paney", "confidence": 0.6877386840481583},
    {"name": "Huang", "confidence": 0.6877386840481583}
]
b = [
    {"name": "Huang", "confidence": 0.6877386840481583}
]
c = [
    {"name": "Paney", "confidence": 0.6877386840481583},
]
d = [
    {"name": "Irene", "confidence": 0.6877386840481583}
]
e = [
    {"name": "Paney", "confidence": 0.6877386840481583},
]

facecon(a)
facecon(b)
facecon(c)
facecon(d)
facecon(e)















# 測試資料
a = [
    {"name": "Huang", "confidence": 0.6877386840481583}
]
b = [
    {"name": "Paney", "confidence": 0.6877386840481583},
]
c = [
    {"name": "Paney", "confidence": 0.6877386840481583},
]
d = [
    {"name": "Paney", "confidence": 0.6877386840481583},
]
e = [
    {"name": "Paney", "confidence": 0.6877386840481583},
]

# x=("結果一:"+face(a)+"\n，結果二:"+face(b)+ "\n，結果三:"+face(c)+"\n，結果四:"+face(d)+"\n，結果五:"+face(e))
# print(x)
# response = model.generate_content("現在一共有三個人，分別是Huang、Irene、Paney，接下來會有五個結果敘述出畫面中這三個人是否存在，每一個人都有存在跟不存在兩個狀態，畫面中沒有提到即代表不存在，同一個人在不同結果中可能會有不同狀態，請綜合所有結果，以多數為真的邏輯，只要一個結果出現次出在三次以上即為真，整合出最終答案，以下中括號中的文字為例題:[結果一:畫面中有Huang、Paney，結果二:畫面中有Huang、Paney，結果三:畫面中有Huang，結果四:畫面中有Irene、Paney，結果五:畫面中有Irene、Paney]以下中括號部分為思考過程，接下來請完全參考此過程作答[判斷Huang:三個結果中Huang存在，兩個結果顯示Huang不存在，因為Huang存在出現了三次，所以判斷Huang存在為真，所以判斷畫面中有Huang；判斷Irene:兩個結果中Irene存在，三個結果顯示Irene不存在，因為Irene不存在的結果在三以上，所以判斷畫面中沒有Irene，由於Irene不存在，則最後答案中不用顯示；判斷Paney:四個結果中Paney存在，一個結果顯示Paney不存在，因為最多結果顯示Paney存在，顯示Paney存在的結果在三以上，所以判斷畫面中有Paney；判斷完所有物品即可整合出答案:畫面中有Huang、Paney。以下為題目，請參考剛剛的思考流程整合結果，再次強調，我需要的是重複次數最多的答案，這是你剛剛的錯誤案例；結果一:畫面中有Irene，結果二:畫面中有Irene，結果三:畫面中有Irene，結果四:畫面中有Huang、Paney，結果五:畫面中有Irene、Paney。你的錯誤回答為:畫面中有Huang，依照案例中五個結果，根據多數為真的邏輯，正確回答應該是:畫面中有Irene。錯誤案例2:結果一:畫面中有Huang，結果二:畫面中有Huang，結果三:畫面中有Irene，結果四:畫面中有Huang，結果五:畫面中有Irene、Paney。你的錯誤回答:畫面中有Irene，根據多數為真，案例中三個結果Huang存在，三個結果Irene不存在，四個結果Paney不存在，以上為真，當不存在的結果的數量在三以上時，就不要回報給使用者，因此答案應該為:畫面中有Huang。請記住，剛剛的只是例子，只能參考案例中答題的答題邏輯，接下來請根據這個答題邏輯幫我隱藏過程，回答現在的情況:"+x)
# print(response.text)
# q=input("輸入問題:")
# response = model.generate_content("Paney、Huang、Irene皆為使用者認識的人，例如使用者可能會問:Paney在我的前面嗎，如果畫面中有Paney的話，就要回答，是的Paney在您的前面。請根據此回答問題，請回答完整句子，如果畫面中沒有該人，就請回答沒有。這是你剛剛的錯誤案例:在這個案例中的畫面中有Huang、Paney，案例的問題為:這附近有我認識的人嗎，你的錯誤回答為:是的，Paney在您的前面。在你的回答中，你忽略了Huang也在你的畫面中，他們三個都是使用者認識的人，因此只要有出現就要回報給使用者，畫面中沒提到Irene，代表他不存在，因此正確的回答為:有，Huang跟Paney在您的前方。此為剛剛的對話紀錄:現在畫面中有Huang、Paney。問題:誰在我的前方。你的回答:Paney在您的前方，看起來你又忽略了畫面中有的Huang，請記住，只要畫面中有提到的都必須回報給使用者，之後請記得修正這個問題，正確回答應該為:目前Paney跟Huang在您的前方。請記住，剛剛的只是例子，只能參考案例中答題的邏輯，接下來請根據畫面中的資訊「現在"+response.text+"」來回答問題，此為使用者前方的畫面，現在使用者的問題為:"+q)
# print(response.text)